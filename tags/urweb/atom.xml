<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <title>steen&#x27;s burrow - urweb</title>
    <subtitle>steen&#x27;s online burrow</subtitle>
    <link rel="self" type="application/atom+xml" href="https://sgt.hootr.club/tags/urweb/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://sgt.hootr.club"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2019-01-07T00:00:00+00:00</updated>
    <id>https://sgt.hootr.club/tags/urweb/atom.xml</id>
    <entry xml:lang="en-us">
        <title>Reading Ur&#x2F;Web signatures, part 1</title>
        <published>2019-01-07T00:00:00+00:00</published>
        <updated>2019-01-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              steen
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://sgt.hootr.club/blog/urweb-sig/"/>
        <id>https://sgt.hootr.club/blog/urweb-sig/</id>
        
        <content type="html" xml:base="https://sgt.hootr.club/blog/urweb-sig/">&lt;p&gt;So you stumbled upon Ur&#x2F;Web and you rather like what it&#x27;s about, but after
trudging through the tutorials and the examples in the few blog posts you&#x27;ve
seen around you can&#x27;t seem to find your own footing. The compiler errors are
long and life is short and you&#x27;re about to throw your computer out the window.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;blog&#x2F;urweb&#x2F;&quot;&gt;I understand.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this post, I&#x27;ll walk you through the signatures of a few functions from the
standard library, hopefully providing you with enough context to make it
through the rest on your own. You might want to grab &lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urweb&#x2F;urweb&#x2F;tree&#x2F;master&#x2F;lib&#x2F;ur&quot;&gt;a copy&lt;&#x2F;a&gt; or search
for the one on your hard drive so you can follow along.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m going to be frank: given the current state of the ecosystem and of the
documentation, you have close to no chance of learning Ur&#x2F;Web if you don&#x27;t
already know some OCaml&#x2F;ReasonML or another language in the ML family, so
if you don&#x27;t you might want to get well acquainted with one first.
&lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;elm-lang.org&#x2F;&quot;&gt;Elm&lt;&#x2F;a&gt; is a good starting point.&lt;&#x2F;p&gt;
&lt;p&gt;Open up &lt;code&gt;string.urs&lt;&#x2F;code&gt; and have a look around. I&#x27;m going to assume you can read
these signatures:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;mli&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-mli &quot;&gt;&lt;code class=&quot;language-mli&quot; data-lang=&quot;mli&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;type t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val append &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;t
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val all &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Still here? Good, let&#x27;s introduce some new syntax.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;mli&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-mli &quot;&gt;&lt;code class=&quot;language-mli&quot; data-lang=&quot;mli&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;option int
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you come from OCaml or SML you might notice that the argument of the type
constructor &lt;code&gt;option&lt;&#x2F;code&gt; is to the right of the constructor, as in normal function
application. This unification of function and type constructor application is
not just a matter of syntax like in &lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;reasonml.github.io&#x2F;docs&#x2F;en&#x2F;comparison-to-ocaml#type-parameters&quot;&gt;ReasonML&lt;&#x2F;a&gt;; put this in the
back of your mind for the moment, we&#x27;ll come back to it later.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;mli&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-mli &quot;&gt;&lt;code class=&quot;language-mli&quot; data-lang=&quot;mli&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val substring &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Start&lt;&#x2F;span&gt;&lt;span&gt; : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Len&lt;&#x2F;span&gt;&lt;span&gt; : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Much like SML, Ur&#x2F;Web makes up for the lack of labeled arguments by using
anonymous records as function arguments. Also, record field names must start
with a capital letter like the members of a variant.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;generics&quot;&gt;Generics&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s kick things up a notch. Open up &lt;code&gt;list.urs&lt;&#x2F;code&gt; and you&#x27;ll be greeted by
something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;mli&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-mli &quot;&gt;&lt;code class=&quot;language-mli&quot; data-lang=&quot;mli&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val rev &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;list a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;list a
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you might have guessed, &lt;code&gt;List.rev&lt;&#x2F;code&gt; is a function that takes a list of
elements and returns another list with the elements of the first, in reverse
order. &lt;code&gt;rev&lt;&#x2F;code&gt; can reverse lists that contain any element, so we say that it is
&lt;em&gt;polymorphic&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;a&lt;&#x2F;code&gt; is the type of the values contained in the input and output list. The
argument &lt;code&gt;a ::: Type&lt;&#x2F;code&gt; is just a way of saying that we don&#x27;t know what type &lt;code&gt;a&lt;&#x2F;code&gt;
will be when we declare the function; it&#x27;s up to the caller to bind it to a
valid type. The triple colon (&lt;code&gt;:::&lt;&#x2F;code&gt;) means that this type parameter is
implicit, so the compiler will take care of inserting the correct type when
calling it.&lt;&#x2F;p&gt;
&lt;p&gt;OCaml and most other languages don&#x27;t require you to explicitly declare these
type parameter, but &lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;blog.janestreet.com&#x2F;ensuring-that-a-function-is-polymorphic-in-ocaml-3-12&#x2F;&quot;&gt;sometimes it is useful&lt;&#x2F;a&gt; to ensure the
well-typedness of a polymorphic function.&lt;&#x2F;p&gt;
&lt;p&gt;Quoting from the &lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;http:&#x2F;&#x2F;www.impredicative.com&#x2F;ur&#x2F;tutorial&#x2F;intro.html&quot;&gt;tutorial&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unlike in ML and Haskell, polymorphic functions in Ur&#x2F;Web often require full
type annotations. That is because more advanced features make Ur type
inference undecidable.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Let&#x27;s pull up the implementation for a moment (found in &lt;code&gt;list.ur&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ml&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-ml &quot;&gt;&lt;code class=&quot;language-ml&quot; data-lang=&quot;ml&quot;&gt;&lt;span&gt;fun rev [a] (ls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt; list a&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;a&lt;&#x2F;code&gt; in square brackets here corresponds to &lt;code&gt;a ::: Type&lt;&#x2F;code&gt; in the signature
above. We could also write it like &lt;code&gt;[a ::: Type]&lt;&#x2F;code&gt; if we wanted to be more
explicit.&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s look at &lt;code&gt;List.mp&lt;&#x2F;code&gt;. (Which is just the &lt;code&gt;List.map&lt;&#x2F;code&gt; function, but it
can&#x27;t be called &lt;code&gt;map&lt;&#x2F;code&gt; because &lt;code&gt;map&lt;&#x2F;code&gt; is a keyword in Ur&#x2F;Web. More on that later.)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;mli&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-mli &quot;&gt;&lt;code class=&quot;language-mli&quot; data-lang=&quot;mli&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val mp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;list a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;list b
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;mp&lt;&#x2F;code&gt; has two polymorphic type parameters, so they are both made explicit in
the signature.&lt;&#x2F;p&gt;
&lt;p&gt;Interestingly, we can write a function so that the type parameter has to be
passed &lt;em&gt;explicitly&lt;&#x2F;em&gt; by replacing &lt;code&gt;:::&lt;&#x2F;code&gt; with a double colon (&lt;code&gt;::&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ml&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-ml &quot;&gt;&lt;code class=&quot;language-ml&quot; data-lang=&quot;ml&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;(* id.urs *)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;a
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;(* id.ur *)
&lt;&#x2F;span&gt;&lt;span&gt;fun id [a :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;] (x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt; a&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; x
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;val x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; id [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;451
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;:::&lt;&#x2F;code&gt; indicates a type parameter that may be inferred by the compiler, while
&lt;code&gt;::&lt;&#x2F;code&gt; indicates one that has to be passed explicitly. The compiler will be able
to infer a type parameter by itself most of the time, but in some cases which
we&#x27;ll see later you&#x27;ll have to be explicit and use the double colon.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;basics-of-type-constructors&quot;&gt;Basics of type constructors&lt;&#x2F;h2&gt;
&lt;p&gt;At this point I should introduce Ur&#x2F;Web&#x27;s type constructors, because they&#x27;re
a lot more powerful than those in most other languages. Open up &lt;code&gt;json.ur&lt;&#x2F;code&gt;
(not &lt;code&gt;json.urs&lt;&#x2F;code&gt;) and the first thing you&#x27;ll see will be this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ml&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-ml &quot;&gt;&lt;code class=&quot;language-ml&quot; data-lang=&quot;ml&quot;&gt;&lt;span&gt;con json a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;ToJson&lt;&#x2F;span&gt;&lt;span&gt; : a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;FromJson&lt;&#x2F;span&gt;&lt;span&gt; : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;* string&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While the &lt;code&gt;con&lt;&#x2F;code&gt; keyword might throw you off, you might recognize this as a
simple type declaration. Ur&#x2F;Web actually makes a distinction between simple
aliases, like the one we encountered at the top of &lt;code&gt;string.urs&lt;&#x2F;code&gt;, and type
constructors, which take one (or more!) arguments, and have to be declared
with the keyword &lt;code&gt;con&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;json&lt;&#x2F;code&gt; type constructor is simply a record with an encoder function which
takes an &lt;code&gt;a&lt;&#x2F;code&gt; and returns a JSON string, and a decoder function which takes a
JSON string and returns an &lt;code&gt;a&lt;&#x2F;code&gt; and the remaining JSON string.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that thing earlier about unifying function application and type
constructor application syntax? The two are actually very closely related:
just as normal functions are functions from values to values, type constructors
can be thought of as &lt;strong&gt;type-level functions from types to types&lt;&#x2F;strong&gt;, and the
purpose of this unification is just to make the similarity more apparent.&lt;&#x2F;p&gt;
&lt;p&gt;This insight might not net you much in OCaml or SML because type constructors
have a lot of limitations compared to functions: they can&#x27;t be curried, and
you can perform very few operations inside them.&lt;&#x2F;p&gt;
&lt;p&gt;Ur&#x2F;Web&#x27;s type constructors are much more interesting. The &lt;code&gt;json&lt;&#x2F;code&gt; declaration
above is actually syntactic sugar for a type-level function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ml&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-ml &quot;&gt;&lt;code class=&quot;language-ml&quot; data-lang=&quot;ml&quot;&gt;&lt;span&gt;con json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; fn (a :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;ToJson&lt;&#x2F;span&gt;&lt;span&gt; : a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;FromJson&lt;&#x2F;span&gt;&lt;span&gt; : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;* string&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can define a &lt;strong&gt;curried&lt;&#x2F;strong&gt; constructor that takes two types and returns the
type of a 2-tuple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;mli&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-mli &quot;&gt;&lt;code class=&quot;language-mli&quot; data-lang=&quot;mli&quot;&gt;&lt;span&gt;con pair a b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; b
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;con intAnd :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Type =&lt;&#x2F;span&gt;&lt;span&gt; pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;intAnd string = &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;451&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&amp;quot;what a shame&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can also perform various useful operations on record types, as we&#x27;ll see
later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;type-classes&quot;&gt;Type classes&lt;&#x2F;h2&gt;
&lt;p&gt;Ur&#x2F;Web&#x27;s &lt;code&gt;=&lt;&#x2F;code&gt; (equals) operator works just like you&#x27;d expect it to for types
provived by the standard library: &lt;code&gt;1 = 1&lt;&#x2F;code&gt;, &lt;code&gt;&quot;line&quot; = &quot;line&quot;&lt;&#x2F;code&gt;,
and &lt;code&gt;Some &quot;just&quot; = Some &quot;just&quot;&lt;&#x2F;code&gt;. So is it implemented like in &lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;blog.janestreet.com&#x2F;the-perils-of-polymorphic-compare&#x2F;&quot;&gt;OCaml&lt;&#x2F;a&gt;,
using a &quot;magic&quot; internal function that structurally compares record fields
and variant members? Not quite.&lt;&#x2F;p&gt;
&lt;p&gt;If we try to compare two records, we&#x27;ll get a surprisingly helpful error
message:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;mli&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-mli &quot;&gt;&lt;code class=&quot;language-mli&quot; data-lang=&quot;mli&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;(* test.ur *)
&lt;&#x2F;span&gt;&lt;span&gt;val ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;A = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;A = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;(* test.ur:1:5: (to 1:26) Can&amp;#39;t resolve type class instance
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;   Class constraint: eq {A : int} *)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s take a look into &lt;code&gt;basis.urs&lt;&#x2F;code&gt;. At line 26, you&#x27;ll see these declarations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;mli&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-mli &quot;&gt;&lt;code class=&quot;language-mli&quot; data-lang=&quot;mli&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;class eq
&lt;&#x2F;span&gt;&lt;span&gt;val eq : t ::: Type -&amp;gt; eq t -&amp;gt; t -&amp;gt; t -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The signature of the &lt;code&gt;eq&lt;&#x2F;code&gt; function looks familiar enough. We still don&#x27;t know
what &lt;code&gt;class eq&lt;&#x2F;code&gt; means, but by the way it&#x27;s used in the function we can infer
that it&#x27;s a constructor that takes one argument.&lt;&#x2F;p&gt;
&lt;p&gt;In fact, &lt;code&gt;eq&lt;&#x2F;code&gt; is just an &lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;caml.inria.fr&#x2F;pub&#x2F;docs&#x2F;manual-ocaml&#x2F;moduleexamples.html#sec20&quot;&gt;abstract type&lt;&#x2F;a&gt;, i.e. a type whose
implementation isn&#x27;t specified in its signature so that only the underlying
module can access it. If you don&#x27;t know what that is, you can think of it as an
opaque pointer in C.&lt;&#x2F;p&gt;
&lt;p&gt;In this case we can&#x27;t look at its actual implementation because &lt;code&gt;Basis&lt;&#x2F;code&gt; is
implemented directly in C, but it would look somewhat like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;mli&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-mli &quot;&gt;&lt;code class=&quot;language-mli&quot; data-lang=&quot;mli&quot;&gt;&lt;span&gt;con eq t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So now we should have all the pieces to understand the &lt;code&gt;eq&lt;&#x2F;code&gt; function above.
Or do we?&lt;&#x2F;p&gt;
&lt;p&gt;If you were to define your own &lt;code&gt;eq&lt;&#x2F;code&gt; constructor and your own &lt;code&gt;eq&lt;&#x2F;code&gt; function,
you&#x27;d always have to pass a function of type &lt;code&gt;eq t&lt;&#x2F;code&gt; as first argument.
(This kind of function can also be called &lt;strong&gt;witness&lt;&#x2F;strong&gt;.)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;mli&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-mli &quot;&gt;&lt;code class=&quot;language-mli&quot; data-lang=&quot;mli&quot;&gt;&lt;span&gt;con eq&amp;#39; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fun eq&amp;#39; [t] (cmp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt; eq&amp;#39; t&lt;&#x2F;span&gt;&lt;span&gt;) (a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt; t&lt;&#x2F;span&gt;&lt;span&gt;) (b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt; t&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  cmp a b
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fun eq&amp;#39;_bool (a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt; bool&lt;&#x2F;span&gt;&lt;span&gt;) (b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt; bool&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  case (a, b) of
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; True
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; True
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; False
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;val test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; eq&amp;#39; eq&amp;#39;_bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;True False
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But if we were to do the same with eq, we would get a compiler error.&lt;&#x2F;p&gt;
&lt;p&gt;Turns out that the &lt;code&gt;eq&lt;&#x2F;code&gt; function is just the desugared name of the &lt;code&gt;=&lt;&#x2F;code&gt;
operator, and as we&#x27;ve seen above, we can use it transparently without having
to worry about the witness function.
This is where the &lt;code&gt;class&lt;&#x2F;code&gt; keyword comes into play.&lt;&#x2F;p&gt;
&lt;p&gt;When we mark &lt;code&gt;eq&lt;&#x2F;code&gt; with the &lt;code&gt;class&lt;&#x2F;code&gt; keyword in a signature file, the compiler
will automatically search for a fitting implementation of &lt;code&gt;eq t&lt;&#x2F;code&gt; every time we
call &lt;code&gt;=&lt;&#x2F;code&gt; with a given &lt;code&gt;t&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;option&lt;&#x2F;code&gt; constructor also defines an &lt;code&gt;eq&lt;&#x2F;code&gt; witness in  the &lt;code&gt;Option&lt;&#x2F;code&gt; module.
This is its signature:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;mli&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-mli &quot;&gt;&lt;code class=&quot;language-mli&quot; data-lang=&quot;mli&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;val eq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;eq a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;eq &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;option a&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This should be straightforward by now. &lt;code&gt;Option.eq&lt;&#x2F;code&gt; implicitly takes a witness
&lt;code&gt;eq a&lt;&#x2F;code&gt; and maps it to the value stored inside the option, if any. Let&#x27;s take
a look at its implementation.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ml&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-ml &quot;&gt;&lt;code class=&quot;language-ml&quot; data-lang=&quot;ml&quot;&gt;&lt;span&gt;fun eq [a] (_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt; eq a&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    mkEq (fn x y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;             case (x, y) of
&lt;&#x2F;span&gt;&lt;span&gt;                 (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; True
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt; x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt; y) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; y
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt; False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The wildcard corresponds to the witness argument, even though the function
doesn&#x27;t use it directly. In a way, the witness argument is just there to
&lt;strong&gt;constrain&lt;&#x2F;strong&gt; the types we can call &lt;code&gt;Option.eq&lt;&#x2F;code&gt; with to those for which there
exists an implementation of &lt;code&gt;eq&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now the error message should make sense: the compiler is telling us that this
invocation of &lt;code&gt;=&lt;&#x2F;code&gt; has a constraint of type &lt;code&gt;eq {A : int}&lt;&#x2F;code&gt; on its arguments,
so we need to implement a witness of &lt;code&gt;eq&lt;&#x2F;code&gt; for &lt;code&gt;{A : int}&lt;&#x2F;code&gt;. We&#x27;ll have to use
the &lt;code&gt;mkEq&lt;&#x2F;code&gt; function to do this.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;mli&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-mli &quot;&gt;&lt;code class=&quot;language-mli&quot; data-lang=&quot;mli&quot;&gt;&lt;span&gt;val eq_a_int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; mkEq
&lt;&#x2F;span&gt;&lt;span&gt;  (fn (a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt; {A : int}&lt;&#x2F;span&gt;&lt;span&gt;) (b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt; {B : int}&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;A =&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;(* this will compile now *)
&lt;&#x2F;span&gt;&lt;span&gt;val ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;A = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;A = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;to-be-continued&quot;&gt;To be continued...&lt;&#x2F;h2&gt;
&lt;p&gt;This post is getting pretty long, so I&#x27;ll wrap it up here for this week.
If you already knew most of the things I covered here, don&#x27;t worry, the next
one is gonna cover some of the most foreign parts of the type system.&lt;&#x2F;p&gt;
&lt;p&gt;Watch this space for part 2! (I promise I&#x27;ll implement an RSS feed soon.)
In the meantime, you might want to brush up on &lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;http:&#x2F;&#x2F;blog.haberkucharsky.com&#x2F;technology&#x2F;2015&#x2F;07&#x2F;21&#x2F;more-monads-in-ocaml.html&quot;&gt;monads&lt;&#x2F;a&gt;,
or take a look at the more dense &lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;http:&#x2F;&#x2F;impredicative.com&#x2F;ur&#x2F;tutorial&#x2F;&quot;&gt;official tutorial&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en-us">
        <title>I survived Ur&#x2F;Web</title>
        <published>2018-01-22T00:00:00+00:00</published>
        <updated>2018-01-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              steen
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://sgt.hootr.club/blog/urweb/"/>
        <id>https://sgt.hootr.club/blog/urweb/</id>
        
        <content type="html" xml:base="https://sgt.hootr.club/blog/urweb/">&lt;p&gt;I don&#x27;t remember when it was that I first tried &lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;http:&#x2F;&#x2F;www.impredicative.com&#x2F;ur&#x2F;&quot;&gt;Ur&#x2F;Web&lt;&#x2F;a&gt;, but I&#x27;m sure I
didn&#x27;t last long with it. As soon as I strayed a bit from the examples provided
on the website (seemingly the only documentation available), I would hit a brick
wall, in the form of unreadable compiler errors. I got so frustrated that I
deleted all the files I was working on and the compiler with them, and I didn&#x27;t
touch the language for a while.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d try again after a few months, once again lured in by the
ludicrous promises listed on the front page of the website: no more complex
ORMs, no more crappy templating languages, no more brittle internal APIs, and
all of this packaged up in a neat ML-like language with a solid and powerful
type system that compiles down to very efficient C code. It was too good to be
true, and I wanted into it. Soon enough I&#x27;d hit another brick wall and the
cycle would repeat itself once again, until I got to the point where I was
confident enough in the language that I could write it for a few hours without
getting stuck too much.&lt;&#x2F;p&gt;
&lt;p&gt;As it turns out, my frustration with it is one of the language&#x27;s many features.
In the age of languages like Elm and Go, which jeopardize sophistication to
appeal to the newcomers, Ur&#x2F;Web takes Haskell&#x27;s motto of avoiding success at
all costs and runs with it. &lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;http:&#x2F;&#x2F;www.impredicative.com&#x2F;pipermail&#x2F;ur&#x2F;2010-December&#x2F;000329.html&quot;&gt;In the words of the language&#x27;s creator&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I also want to emphasize that I&#x27;m not trying to maximize adoption of
Ur&#x2F;Web.  Rather, I&#x27;m trying to maximize the effectiveness of people who
do choose to use it.  This means that I&#x27;m completely happy if basic
features of Ur&#x2F;Web mean that 90% of programmers will never be able to
use it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Seen from this perspective, everything starts falling into place. The homepage
straight from the late 90s, the few examples and the TeX-formatted PDF manual,
the lack of any sort of documentation to the standard library that doesn&#x27;t
involve digging through the scantly commented signature files. &lt;strong&gt;It&#x27;s all
intended.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Jokes aside, while I do find the approach to language design admirable, I think
the ecosystem could use a lot of improvement; at the very least some more
comments in the stdlib signature files and possibly some way to generate an
HTML page out of them, in the style of &lt;code&gt;ocamldoc&lt;&#x2F;code&gt;. I&#x27;ve spent enough time
trying to differentiate &lt;code&gt;queryL&lt;&#x2F;code&gt; and &lt;code&gt;queryL1&lt;&#x2F;code&gt; that I&#x27;ve developed a feel for
it, but I&#x27;d much rather have a thorough explaination of why they&#x27;re named like
that.&lt;&#x2F;p&gt;
&lt;p&gt;The compiler also outputs errors which range from completely unhelpful parsing
errors to dozens and dozens of desugared XML and SQL statements which rival C++
template error messages in succintness and readability. As with the standard
library functions, the error messages are there to give you a feel for what the
compiler wants to see rather than to provide a useful explaination of what
happened.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-good-parts&quot;&gt;The good parts&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve only bashed the language up to now, so it&#x27;s about time that I start
mentioning its good parts. Ur&#x2F;Web is amazing! Part of the reason why I&#x27;m
writing this is in the hopes of getting even one other person interested in the
project, because I think it deserves more users.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a long and winding road to get there, but Ur&#x2F;Web &lt;em&gt;does&lt;&#x2F;em&gt; deliver on its
promises of speeding up application development. Once you start working with
the compiler rather than against it, you&#x27;ll find that you only have to worry
about the parts of your application that matter rather than getting entangled
in busywork. The compiler will not only check for mismatches in the types of
every function and value in the program like in a normal statically typed
language, but it will also check them against the database tables, cookies,
form fields and any other kind of client-server interaction; your program
simply won&#x27;t compile if you query a column that doesn&#x27;t exist.&lt;&#x2F;p&gt;
&lt;p&gt;Defining tables, queries, cookies and RPC becomes pretty much effortless, and
you can achieve a much higher level of &quot;separation of concerns&quot; through
thoughtful use of the signature files. At first I tried going for a MVC-like
approach by putting all my tables and queries in a module and all pages in
another, but after a while I found that it makes more sense to define tables
and cookies right in the modules that need them, so as not to needlessly expose
them to modules that don&#x27;t. Database tables and cookies in Ur&#x2F;Web are somewhat
like normal types, so you can keep them as an implementation detail of a module
or expose them as needed.&lt;&#x2F;p&gt;
&lt;p&gt;Ur&#x2F;Web also compiles the client-side portions of your code to Javascript, so
you can write client code directly &lt;em&gt;in the page handler&lt;&#x2F;em&gt; and run the same
functions both on the server and the client (as long as they don&#x27;t use any
server- or client-specific features). Reactive page generation &lt;em&gt;à la React&lt;&#x2F;em&gt; is
also supported through the &lt;code&gt;&amp;lt;dyn&#x2F;&amp;gt;&lt;&#x2F;code&gt; tag, which lets you subscribe to a &lt;code&gt;source&lt;&#x2F;code&gt;
(basically a mutable cell, similar to &lt;code&gt;ref&lt;&#x2F;code&gt; in OCaml) and automatically reacts
when the source changes.  You can also push data asynchronously to a client with
&lt;code&gt;channel&lt;&#x2F;code&gt; and call functions that need server features without reloading the
page with &lt;code&gt;rpc&lt;&#x2F;code&gt; (which unfortunately doesn&#x27;t support file inputs, but I&#x27;m
working on an AJAX library that will let you do that).&lt;&#x2F;p&gt;
&lt;p&gt;The language works with a transactional model which marks every function that
will have a different output even with the same inputs (e.g. a random number
generator or a database query) with the type &lt;code&gt;transaction&lt;&#x2F;code&gt;, and undoes any
changes that might have been made in case of an error. I had a bit of trouble
understanding the model, mostly because &lt;code&gt;transaction&lt;&#x2F;code&gt; is a monad and I wasn&#x27;t
acquainted with the concept when I first tried the language, but after a while
it became useful and natural to wall off the effectful functions from the rest
of the code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-future&quot;&gt;The future?&lt;&#x2F;h2&gt;
&lt;p&gt;Ur&#x2F;Web is far from perfect; even with a better ecosystem, documentation and
compiler messages, there&#x27;s lots of things that annoy me (the &quot;end&quot; keyword
in &lt;code&gt;let .. in .. end&lt;&#x2F;code&gt; blocks, the lack of a buffer type to make string
manipulation less painful for the allocator, the lack of support for
interacting with data types more complex than strings and integers in C
bindings, ...), but it still feels like working with a language from the
future. A future where frameworks are actually compilers aware of the
application domain, and will check non-trivial properties of a program for
correctness.&lt;&#x2F;p&gt;
&lt;p&gt;That future, I think, is (or was) the end goal of the language&#x27;s author, Adam
Chlipala. He seems to have envisioned Ur as a language that allows syntactic
and compiler extensions to fit any sort of application domain in a similar
manner. He looks more interested in other projects these days (though he&#x27;s
still actively developing Ur&#x2F;Web) so I doubt this will ever come to fruition,
but it might be a goal worth pursuing.&lt;&#x2F;p&gt;
&lt;p&gt;Eduardo Julian, the author of the
&lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;LuxLang&#x2F;lux&quot;&gt;Lux programming language&lt;&#x2F;a&gt;, gave a
&lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=T-BZvBWiamU&quot;&gt;talk at StrangeLoop&lt;&#x2F;a&gt; last year
where he talked with the fervor of a madman about a similar dream of letting
users of his language implement domain-specific optimizations, core features
and compilation targets without having to change the language itself.
&lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;racket-lang.org&#x2F;&quot;&gt;Racket&lt;&#x2F;a&gt;&#x27;s goal is to be both a general-purpose
language and a language platform, with which users can implement their own
domain-specific syntax and let it interact with normal Racket code or other
domain-specific languages. There&#x27;s probably other projects with similar goals
that I don&#x27;t know of, so perhaps we&#x27;ll see more of this in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Getting back to Ur&#x2F;Web, if you like functional languages, hate the current
state of web development, can bear with the lack of documentation and
StackOverflow support, and already know a bit of Haskell&#x2F;OCaml&#x2F;SML, I
recommend you try it. It takes a while for it to click, but when it does it&#x27;s a
wonderful experience, and you&#x27;ll certainly learn something about types, MLs or
even web development in the process.&lt;&#x2F;p&gt;
&lt;p&gt;For my part, I&#x27;ll try to contribute some documentation to the project to make
it a bit easier to get into the language.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;http:&#x2F;&#x2F;blog.ezyang.com&#x2F;2012&#x2F;07&#x2F;polymorphic-variants-in-urweb&#x2F;&quot;&gt;Polymorphic variants in Ur&#x2F;Web&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en-us">
        <title>What the hell did I do this week, anyway?</title>
        <published>2018-01-22T00:00:00+00:00</published>
        <updated>2018-01-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              steen
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://sgt.hootr.club/blog/week-001/"/>
        <id>https://sgt.hootr.club/blog/week-001/</id>
        
        <content type="html" xml:base="https://sgt.hootr.club/blog/week-001/">&lt;p&gt;Welcome to the first installation of &lt;strong&gt;What The Hell Did I Do This Week Anyway&lt;&#x2F;strong&gt;,
the low-effort blog series where I write about random stuff that I did in the
last few days.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;emacs-strikes-again-or-the-stages-of-software-grief&quot;&gt;Emacs strikes again, or the stages of software grief&lt;&#x2F;h2&gt;
&lt;p&gt;This week I watched a bunch of Jonathan Blow&#x27;s &lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;user&#x2F;jblow888&#x2F;videos&quot;&gt;screencasts&lt;&#x2F;a&gt;,
where he talks about the language he&#x27;s writing and all that business. It looks
nice. Lately he&#x27;s working on libraries, and I wish he&#x27;d take a hint from ML
functors when designing modules and module options, as he&#x27;s talked about in
the libraries discussion stream. Expose a fucking module for configuration and
make it return the full thing, using strings for that just feels painful.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, he uses emacs for all the programming in his stream, save for debugging
a bunch of stuff in C++, and looking at emacs for all this time has reawakened
the little bug in my brain that tells me to start using emacs already. I use
nvim for everything, but I&#x27;m kind of horrified by the whole vimscript business
and at the very least elisp is a saner language.&lt;br &#x2F;&gt;
Screw learning all those keybinds though. I&#x27;ve spent years on vim and I think
the modal editing business is a much better fit to editing code than the big
mess of emacs keybinds.
Screw using evil too, though, because emacs is not vi and I don&#x27;t think it
should be. Screw all the minor modes that kind of mimic vi but also kind of
don&#x27;t, and screw a lot of the packages that emacs comes preloaded with.&lt;&#x2F;p&gt;
&lt;p&gt;I downloaded the emacs source and managed to compile temacs, which is the
&quot;bare&quot; version of emacs that gets filled in with all the preloaded libraries
and elisp code, and then gets &quot;dumped&quot; to the final emacs executable we all
know and fear. I recommend &lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;http:&#x2F;&#x2F;emacshorrors.com&#x2F;posts&#x2F;unexecute.html&quot;&gt;this&lt;&#x2F;a&gt;
for the gory details on this horrifying process.
I think there might be a few steps in the build process that should happen
after building temacs but before actually loading temacs and dumping it to
emacs, because I can&#x27;t get the damn thing to work. I invoke temacs and tell it
to load &lt;code&gt;loadup.el&lt;&#x2F;code&gt; (the file that loads all the plugins and tells emacs to
dump itself) but it keeps failing with some error message or another.
First it&#x27;s pcase, then it&#x27;s require, and who knows what the next will be.
Despite its reputation for being so hackable, this part of the build process
sure is not, and if it is it&#x27;s &lt;em&gt;very&lt;&#x2F;em&gt; undocumented.&lt;&#x2F;p&gt;
&lt;p&gt;I started writing my own loadup file in hopes of getting it right, but I ran
into some files that supposedly provide Common Lisp support which for some
reason &lt;code&gt;require&lt;&#x2F;code&gt; each other. At this point I gave up, because I was already way
past the treshold of time and effort I wanted to allocate to emacs that evening.
Thanks, jwz.&lt;&#x2F;p&gt;
&lt;p&gt;The next step in the stages of software grief is starting to implement your own
version, because you&#x27;re &lt;strong&gt;so&lt;&#x2F;strong&gt; done with whatever you were using before and its
alternatives and how hard could it possibly be anyway. Which is exactly what I
did, as soon as I remembered that Racket came with a perfectly good library for
drawing stuff on the screen, on top of which they implemented a GUI library and
the very nice editor&#x2F;IDE DrRacket.
I looked up how Racket implements the editor window, and the results weren&#x27;t
exactly what I&#x27;d call readable or encouragings, after messing a bit with the
&lt;code&gt;canvas%&lt;&#x2F;code&gt; class I decided to give up for the moment.&lt;&#x2F;p&gt;
&lt;p&gt;Which is where I reached the last stage of software grief, in which I changed
my vim colorscheme to &lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ajmwagar&#x2F;vim-deus&quot;&gt;deus&lt;&#x2F;a&gt; and called
it a day.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;eight-whole-bytes-of-security&quot;&gt;Eight whole bytes of security&lt;&#x2F;h2&gt;
&lt;p&gt;I was working on my Ur&#x2F;Web imageboard, when I noticed that I accidentally typed
&quot;passwords&quot; instead of &quot;password&quot; and still managed to log in. I looked up the
implementation of &lt;code&gt;crypt&lt;&#x2F;code&gt; (the only password hashing function provided in
Ur&#x2F;Web) in the runtime library and discovered that it uses OpenSSL&#x27;s
&lt;code&gt;DES_crypt&lt;&#x2F;code&gt;, which clips passwords to 8 characters (!) and has been deemed
obsolete for decades now (with good reason). I don&#x27;t know what the
production-class Ur&#x2F;Web applications do for password hashing, but thankfully
searching for &lt;code&gt;crypt&lt;&#x2F;code&gt; in both the Bazqux Reader and UPO repos doesn&#x27;t turn
up any results. Either way, nobody had bothered to write Ur&#x2F;Web bindings to a
better password hashing algorithm, so I figured I&#x27;d do it.&lt;&#x2F;p&gt;
&lt;p&gt;The result is &lt;a class=&quot;external-link&quot; rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;steinuil&#x2F;urweb-bcrypt&quot;&gt;this library&lt;&#x2F;a&gt;, which
uses Solar Designer&#x27;s implementation of the algorithm. It only exposes two
functions, so integrating it with my imageboard only took something like two
minutes. I&#x27;m quite satisfied with it, though it could probably use some tests.&lt;&#x2F;p&gt;
&lt;p&gt;The other result is that I&#x27;ve submitted a PR with a comment on the &lt;code&gt;crypt&lt;&#x2F;code&gt;
function in the Ur&#x2F;Web standard library, essentially explaining that it&#x27;s
insecure and you should probably consider an alternative (such as my library).&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
